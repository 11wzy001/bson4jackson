package de.undercouch.bson4jackson;

import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteOrder;

import org.codehaus.jackson.Base64Variant;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.ObjectCodec;
import org.codehaus.jackson.impl.JsonGeneratorBase;
import org.codehaus.jackson.impl.JsonWriteContext;

/**
 * Writes BSON code to the provided output stream
 * @author Michel Kraemer
 */
public class BsonGenerator extends JsonGeneratorBase {
	/**
     * Defines toggable features
     */
	public enum Feature {
		/**
		 * <p>Enables streaming by setting the document's total
		 * number of bytes in the header to 0. This allows the generator
		 * to flush the output buffer from time to time. Otherwise the
		 * generator would have to buffer the whole file to be able to
		 * calculate the total number of bytes.</p>
		 * <p><b>ATTENTION:</b> By enabling this feature, the BSON document
		 * generated by this class will not be compatible to the
		 * specification! However, if you know what you are doing and
		 * if you know that the document will be read by a parser that
		 * ignores the total number of bytes anyway (like {@link BsonParser}
		 * or <code>org.bson.BSONDecoder</code> from the MongoDB Java Driver
		 * do) then this feature will be very useful.</p>
		 */
		ENABLE_STREAMING;
		
		/**
		 * @return the bit mask that identifies this feature
		 */
		public int getMask() {
			return (1 << ordinal());
		}
	}
	
	/**
	 * Bit flag composed of bits that indicate which
	 * {@link Feature}s are enabled.
	 */
    protected final int _bsonFeatures;
    
	/**
	 * The output stream to write to
	 */
	protected final OutputStream _out;
	
	/**
	 * Since a BSON document's header must include the size of the whole document
	 * in bytes, we have to buffer the whole document first, before we can
	 * write it to the output stream. BSON specifies LITTLE_ENDIAN for all tokens.
	 */
	protected final DynamicOutputBuffer _buffer = new DynamicOutputBuffer(ByteOrder.LITTLE_ENDIAN);
	
	/**
	 * Saves the position of the type marker for the object currently begin written
	 */
	protected int _typeMarker = 0;
	
	/**
	 * Counts the number of nested objects. In level 0 no object marker will
	 * be written.
	 */
	protected int _objectLevel = 0;
	
	/**
	 * Creates a new generator
	 * @param jsonFeatures bit flag composed of bits that indicate which
     * {@link org.codehaus.jackson.JsonGenerator.Feature}s are enabled.
     * @param bsonFeatures bit flag composed of bits that indicate which
	 * {@link Feature}s are enabled.
	 * @param codec the codec used to write the document
	 * @param out the output stream to write to
	 */
	public BsonGenerator(int jsonFeatures, int bsonFeatures, ObjectCodec codec, OutputStream out) {
		super(jsonFeatures, codec);
		_bsonFeatures = bsonFeatures;
		_out = out;
	}
	
	/**
	 * Checks if a generator feature is enabled
	 * @param f the feature
	 * @return true if the given feature is enabled
	 */
	protected boolean isEnabled(Feature f) {
		return (_bsonFeatures & f.getMask()) != 0;
	}
	
	/**
	 * Encodes the given string into modified UTF-8 and writes it
	 * to the output buffer
	 * @param s the string
	 */
	protected void writeModifiedUTF8(CharSequence s) {
		for (int i = 0; i < s.length(); ++i) {
			char c = s.charAt(i);
			if (c >= 0x0001 && c <= 0x007F) {
				_buffer.putByte((byte)c);
			} else if (c > 0x07FF) {
				_buffer.putByte((byte)(0xE0 | ((c >> 12) & 0x0F)));
				_buffer.putByte((byte)(0x80 | ((c >> 6) & 0x3F)));
				_buffer.putByte((byte)(0x80 | (c & 0x3F)));
			} else {
				_buffer.putByte((byte)(0xC0 | ((c >> 6) & 0x1F)));
				_buffer.putByte((byte)(0x80 | (c & 0x3F)));
			}
		}
	}
	
	/**
	 * Writes the BSON header to the output buffer. This method can be called
	 * repeatedly. It just overwrites the first bytes of the buffer.
	 */
	public void putHeader() {
		if (_buffer.size() == 0) {
			_buffer.putInt(_buffer.size());
		} else {
			_buffer.putInt(0, _buffer.size());
		}
	}
	
	@Override
	public void flush() throws IOException {
		_out.flush();
	}

	@Override
	protected void _releaseBuffers() {
		_buffer.clear();
	}
	
	@Override
	public void close() throws IOException {
		//finish document
		_buffer.putByte(BsonConstants.TYPE_END);
		
		//re-write header to update document size (only if
		//streaming is not enabled since in this case the buffer
		//containing the header might not be available anymore)
		if (!isEnabled(Feature.ENABLE_STREAMING)) {
			putHeader();
		}
		
		//write buffer to output stream (if streaming is enabled,
		//this will write the the rest of the buffer)
		_buffer.writeTo(_out);
		_out.flush();
	}
	
	@Override
	protected void _writeStartArray() throws IOException,
			JsonGenerationException {
		//TODO test this method
		_buffer.putByte(BsonConstants.TYPE_ARRAY);
	}

	@Override
	protected void _writeEndArray() throws IOException, JsonGenerationException {
		// TODO Auto-generated method stub
	}

	@Override
	protected void _writeStartObject() throws IOException,
			JsonGenerationException {
		if (_objectLevel > 0) {
			_buffer.putByte(BsonConstants.TYPE_DOCUMENT);
		}
		++_objectLevel;
	}

	@Override
	protected void _writeEndObject() throws IOException,
			JsonGenerationException {
		if (_objectLevel > 0) {
			--_objectLevel;
		}
	}

	@Override
	protected void _writeFieldName(String name, boolean commaBefore)
			throws IOException, JsonGenerationException {
		//reserve bytes for the type
		_typeMarker = _buffer.size();
		_buffer.putByte((byte)0);
		
		//write field name
		writeModifiedUTF8(name);
		_buffer.putByte(BsonConstants.END_OF_STRING);
	}

	@Override
	protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException {
		int status = _writeContext.writeValue();
		if (status == JsonWriteContext.STATUS_EXPECT_NAME) {
			_reportError("Can not " + typeMsg + ", expecting field name");
		}
	}
	
	/**
	 * Tries to flush the output buffer if streaming is enabled. This
	 * method is a no-op if streaming is disabled.
	 * @throws IOException if flushing failed
	 */
	protected void flushBuffer() throws IOException {
		if (isEnabled(Feature.ENABLE_STREAMING)) {
			_buffer.flushTo(_out);
		}
	}

	@Override
	public void writeString(String text) throws IOException,
			JsonGenerationException {
		_verifyValueWrite("write string");
		_buffer.putByte(_typeMarker, BsonConstants.TYPE_STRING);
		
		//reserve space for the string size
		int p = _buffer.size();
		_buffer.putInt(0);
		
		//write string
		int l = _buffer.putUTF8(text);
		_buffer.putByte(BsonConstants.END_OF_STRING);
		
		//write string size
		_buffer.putInt(p, l + 1);
		
		flushBuffer();
	}

	@Override
	public void writeString(char[] text, int offset, int len)
			throws IOException, JsonGenerationException {
		writeString(new String(text, offset, len));
	}

	@Override
	public void writeRaw(String text) throws IOException,
			JsonGenerationException {
		// TODO Auto-generated method stub
	}

	@Override
	public void writeRaw(String text, int offset, int len) throws IOException,
			JsonGenerationException {
		// TODO Auto-generated method stub
	}

	@Override
	public void writeRaw(char[] text, int offset, int len) throws IOException,
			JsonGenerationException {
		// TODO Auto-generated method stub
	}

	@Override
	public void writeRaw(char c) throws IOException, JsonGenerationException {
		// TODO Auto-generated method stub
	}

	@Override
	public void writeBinary(Base64Variant b64variant, byte[] data, int offset,
			int len) throws IOException, JsonGenerationException {
		// TODO Auto-generated method stub
	}

	@Override
	public void writeNumber(int v) throws IOException, JsonGenerationException {
		_verifyValueWrite("write number");
		_buffer.putByte(_typeMarker, BsonConstants.TYPE_INT32);
		_buffer.putInt(v);
		flushBuffer();
	}

	@Override
	public void writeNumber(long v) throws IOException, JsonGenerationException {
		_verifyValueWrite("write number");
		_buffer.putByte(_typeMarker, BsonConstants.TYPE_INT64);
		_buffer.putLong(v);
		flushBuffer();
	}

	@Override
	public void writeNumber(BigInteger v) throws IOException,
			JsonGenerationException {
		int bl = v.bitLength();
		if (bl < 32) {
			writeNumber(v.intValue());
		} else if (bl < 64) {
			writeNumber(v.longValue());
		} else {
			writeString(v.toString());
		}
	}

	@Override
	public void writeNumber(double d) throws IOException,
			JsonGenerationException {
		_verifyValueWrite("write number");
		_buffer.putByte(_typeMarker, BsonConstants.TYPE_DOUBLE);
		_buffer.putDouble(d);
		flushBuffer();
	}

	@Override
	public void writeNumber(float f) throws IOException,
			JsonGenerationException {
		//BSON understands double values only
		writeNumber((double)f);
	}

	@Override
	public void writeNumber(BigDecimal dec) throws IOException,
			JsonGenerationException {
		float f = dec.floatValue();
		if (!Float.isInfinite(f)) {
			writeNumber(f);
		} else {
			double d = dec.doubleValue();
			if (!Double.isInfinite(d)) {
				writeNumber(d);
			} else {
				writeString(dec.toString());
			}
		}
	}

	@Override
	public void writeNumber(String encodedValue) throws IOException,
			JsonGenerationException, UnsupportedOperationException {
		writeString(encodedValue);
	}

	@Override
	public void writeBoolean(boolean state) throws IOException,
			JsonGenerationException {
		_verifyValueWrite("write boolean");
		_buffer.putByte(_typeMarker, BsonConstants.TYPE_BOOLEAN);
		_buffer.putByte((byte)(state ? 1 : 0));
		flushBuffer();
	}

	@Override
	public void writeNull() throws IOException, JsonGenerationException {
		_verifyValueWrite("write null");
		_buffer.putByte(_typeMarker, BsonConstants.TYPE_NULL);
		flushBuffer();
	}
}
